
spaceinvaders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000978  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b00  08000b08  00010b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b00  08000b00  00010b08  2**0
                  CONTENTS
  4 .ARM          00000000  08000b00  08000b00  00010b08  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b00  08000b08  00010b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b00  08000b00  00010b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b04  08000b04  00010b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000000  08000b08  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08000b08  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010b08  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f20  00000000  00000000  00010b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b02  00000000  00000000  00014a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000408  00000000  00000000  00015560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000390  00000000  00000000  00015968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022f9  00000000  00000000  00015cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000456c  00000000  00000000  00017ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005842e  00000000  00000000  0001c55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007498b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001054  00000000  00000000  000749dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ae8 	.word	0x08000ae8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000ae8 	.word	0x08000ae8

080001c8 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	330c      	adds	r3, #12
 80001e0:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	78fa      	ldrb	r2, [r7, #3]
 80001e6:	701a      	strb	r2, [r3, #0]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr

080001f4 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b085      	sub	sp, #20
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	460b      	mov	r3, r1
 80001fe:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	891b      	ldrh	r3, [r3, #8]
 8000208:	b29a      	uxth	r2, r3
 800020a:	887b      	ldrh	r3, [r7, #2]
 800020c:	4013      	ands	r3, r2
 800020e:	b29b      	uxth	r3, r3
 8000210:	2b00      	cmp	r3, #0
 8000212:	d002      	beq.n	800021a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000214:	2301      	movs	r3, #1
 8000216:	73fb      	strb	r3, [r7, #15]
 8000218:	e001      	b.n	800021e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800021a:	2300      	movs	r3, #0
 800021c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800021e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000220:	4618      	mov	r0, r3
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr

0800022c <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800022c:	b480      	push	{r7}
 800022e:	b087      	sub	sp, #28
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
 800023e:	2300      	movs	r3, #0
 8000240:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000242:	2300      	movs	r3, #0
 8000244:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	b29b      	uxth	r3, r3
 800024a:	0a1b      	lsrs	r3, r3, #8
 800024c:	b29b      	uxth	r3, r3
 800024e:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	b2db      	uxtb	r3, r3
 8000254:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000256:	2201      	movs	r2, #1
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	fa02 f303 	lsl.w	r3, r2, r3
 800025e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d105      	bne.n	8000272 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	697a      	ldr	r2, [r7, #20]
 800026c:	4013      	ands	r3, r2
 800026e:	617b      	str	r3, [r7, #20]
 8000270:	e00d      	b.n	800028e <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	2b02      	cmp	r3, #2
 8000276:	d105      	bne.n	8000284 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	697a      	ldr	r2, [r7, #20]
 800027e:	4013      	ands	r3, r2
 8000280:	617b      	str	r3, [r7, #20]
 8000282:	e004      	b.n	800028e <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	697a      	ldr	r2, [r7, #20]
 800028a:	4013      	ands	r3, r2
 800028c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	0c1b      	lsrs	r3, r3, #16
 8000292:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000294:	2201      	movs	r2, #1
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	fa02 f303 	lsl.w	r3, r2, r3
 800029c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	69db      	ldr	r3, [r3, #28]
 80002a2:	68fa      	ldr	r2, [r7, #12]
 80002a4:	4013      	ands	r3, r2
 80002a6:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d005      	beq.n	80002ba <USART_GetITStatus+0x8e>
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d002      	beq.n	80002ba <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80002b4:	2301      	movs	r3, #1
 80002b6:	74fb      	strb	r3, [r7, #19]
 80002b8:	e001      	b.n	80002be <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 80002ba:	2300      	movs	r3, #0
 80002bc:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80002be:	7cfb      	ldrb	r3, [r7, #19]
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	371c      	adds	r7, #28
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <USART2_IRQHandler>:

    return len;
}

void USART2_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80002d0:	4915      	ldr	r1, [pc, #84]	; (8000328 <USART2_IRQHandler+0x5c>)
 80002d2:	4816      	ldr	r0, [pc, #88]	; (800032c <USART2_IRQHandler+0x60>)
 80002d4:	f7ff ffaa 	bl	800022c <USART_GetITStatus>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d021      	beq.n	8000322 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <USART2_IRQHandler+0x60>)
 80002e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80002e2:	b299      	uxth	r1, r3
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <USART2_IRQHandler+0x64>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	1c5a      	adds	r2, r3, #1
 80002ec:	b2d0      	uxtb	r0, r2
 80002ee:	4a10      	ldr	r2, [pc, #64]	; (8000330 <USART2_IRQHandler+0x64>)
 80002f0:	7010      	strb	r0, [r2, #0]
 80002f2:	461a      	mov	r2, r3
 80002f4:	b2c9      	uxtb	r1, r1
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <USART2_IRQHandler+0x68>)
 80002f8:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <USART2_IRQHandler+0x6c>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	2bff      	cmp	r3, #255	; 0xff
 8000302:	d107      	bne.n	8000314 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000304:	4b0d      	ldr	r3, [pc, #52]	; (800033c <USART2_IRQHandler+0x70>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	3301      	adds	r3, #1
 800030c:	b2da      	uxtb	r2, r3
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <USART2_IRQHandler+0x70>)
 8000310:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000312:	e006      	b.n	8000322 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <USART2_IRQHandler+0x6c>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	b2db      	uxtb	r3, r3
 800031a:	3301      	adds	r3, #1
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <USART2_IRQHandler+0x6c>)
 8000320:	701a      	strb	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	00050105 	.word	0x00050105
 800032c:	40004400 	.word	0x40004400
 8000330:	2000011c 	.word	0x2000011c
 8000334:	2000001c 	.word	0x2000001c
 8000338:	2000011e 	.word	0x2000011e
 800033c:	2000011d 	.word	0x2000011d

08000340 <lcd_transmit_byte>:
}

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <lcd_transmit_byte+0x5c>)
 800034c:	8a9b      	ldrh	r3, [r3, #20]
 800034e:	b29b      	uxth	r3, r3
 8000350:	4a12      	ldr	r2, [pc, #72]	; (800039c <lcd_transmit_byte+0x5c>)
 8000352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000356:	b29b      	uxth	r3, r3
 8000358:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 800035a:	bf00      	nop
 800035c:	2102      	movs	r1, #2
 800035e:	4810      	ldr	r0, [pc, #64]	; (80003a0 <lcd_transmit_byte+0x60>)
 8000360:	f7ff ff48 	bl	80001f4 <SPI_I2S_GetFlagStatus>
 8000364:	4603      	mov	r3, r0
 8000366:	2b01      	cmp	r3, #1
 8000368:	d1f8      	bne.n	800035c <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4619      	mov	r1, r3
 800036e:	480c      	ldr	r0, [pc, #48]	; (80003a0 <lcd_transmit_byte+0x60>)
 8000370:	f7ff ff2a 	bl	80001c8 <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8000374:	bf00      	nop
 8000376:	2102      	movs	r1, #2
 8000378:	4809      	ldr	r0, [pc, #36]	; (80003a0 <lcd_transmit_byte+0x60>)
 800037a:	f7ff ff3b 	bl	80001f4 <SPI_I2S_GetFlagStatus>
 800037e:	4603      	mov	r3, r0
 8000380:	2b01      	cmp	r3, #1
 8000382:	d1f8      	bne.n	8000376 <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <lcd_transmit_byte+0x5c>)
 8000386:	8a9b      	ldrh	r3, [r3, #20]
 8000388:	b29b      	uxth	r3, r3
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <lcd_transmit_byte+0x5c>)
 800038c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000390:	b29b      	uxth	r3, r3
 8000392:	8293      	strh	r3, [r2, #20]
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	48000400 	.word	0x48000400
 80003a0:	40003800 	.word	0x40003800

080003a4 <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
    int i = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80003b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b4:	8a9b      	ldrh	r3, [r3, #20]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80003c4:	2000      	movs	r0, #0
 80003c6:	f7ff ffbb 	bl	8000340 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80003ca:	2010      	movs	r0, #16
 80003cc:	f7ff ffb8 	bl	8000340 <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 80003d0:	20b0      	movs	r0, #176	; 0xb0
 80003d2:	f7ff ffb5 	bl	8000340 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80003d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003da:	8a9b      	ldrh	r3, [r3, #20]
 80003dc:	b29b      	uxth	r3, r3
 80003de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	e009      	b.n	8000404 <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	4413      	add	r3, r2
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ffa1 	bl	8000340 <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	3301      	adds	r3, #1
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	2b7f      	cmp	r3, #127	; 0x7f
 8000408:	ddf2      	ble.n	80003f0 <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 800040a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800040e:	8a9b      	ldrh	r3, [r3, #20]
 8000410:	b29b      	uxth	r3, r3
 8000412:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000416:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800041a:	b29b      	uxth	r3, r3
 800041c:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 800041e:	2000      	movs	r0, #0
 8000420:	f7ff ff8e 	bl	8000340 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000424:	2010      	movs	r0, #16
 8000426:	f7ff ff8b 	bl	8000340 <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 800042a:	20b1      	movs	r0, #177	; 0xb1
 800042c:	f7ff ff88 	bl	8000340 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000430:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000434:	8a9b      	ldrh	r3, [r3, #20]
 8000436:	b29b      	uxth	r3, r3
 8000438:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800043c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000440:	b29b      	uxth	r3, r3
 8000442:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	e009      	b.n	800045e <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	4413      	add	r3, r2
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff74 	bl	8000340 <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	3301      	adds	r3, #1
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	2bff      	cmp	r3, #255	; 0xff
 8000462:	ddf2      	ble.n	800044a <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000464:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000468:	8a9b      	ldrh	r3, [r3, #20]
 800046a:	b29b      	uxth	r3, r3
 800046c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000474:	b29b      	uxth	r3, r3
 8000476:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff61 	bl	8000340 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 800047e:	2010      	movs	r0, #16
 8000480:	f7ff ff5e 	bl	8000340 <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 8000484:	20b2      	movs	r0, #178	; 0xb2
 8000486:	f7ff ff5b 	bl	8000340 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 800048a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800048e:	8a9b      	ldrh	r3, [r3, #20]
 8000490:	b29b      	uxth	r3, r3
 8000492:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800049a:	b29b      	uxth	r3, r3
 800049c:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 800049e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	e009      	b.n	80004ba <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	4413      	add	r3, r2
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ff46 	bl	8000340 <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80004c0:	dbf1      	blt.n	80004a6 <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80004c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004c6:	8a9b      	ldrh	r3, [r3, #20]
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff ff32 	bl	8000340 <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80004dc:	2010      	movs	r0, #16
 80004de:	f7ff ff2f 	bl	8000340 <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 80004e2:	20b3      	movs	r0, #179	; 0xb3
 80004e4:	f7ff ff2c 	bl	8000340 <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80004e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ec:	8a9b      	ldrh	r3, [r3, #20]
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 80004fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	e009      	b.n	8000518 <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff17 	bl	8000340 <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800051e:	dbf1      	blt.n	8000504 <lcd_push_buffer+0x160>
    }
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <lcd_reset>:

void lcd_reset()
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 8000532:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000536:	8a9b      	ldrh	r3, [r3, #20]
 8000538:	b29b      	uxth	r3, r3
 800053a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800053e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000542:	b29b      	uxth	r3, r3
 8000544:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 8000546:	4b2f      	ldr	r3, [pc, #188]	; (8000604 <lcd_reset+0xd8>)
 8000548:	8a9b      	ldrh	r3, [r3, #20]
 800054a:	b29b      	uxth	r3, r3
 800054c:	4a2d      	ldr	r2, [pc, #180]	; (8000604 <lcd_reset+0xd8>)
 800054e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000552:	b29b      	uxth	r3, r3
 8000554:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 8000556:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <lcd_reset+0xd8>)
 8000558:	8a9b      	ldrh	r3, [r3, #20]
 800055a:	b29b      	uxth	r3, r3
 800055c:	4a29      	ldr	r2, [pc, #164]	; (8000604 <lcd_reset+0xd8>)
 800055e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000562:	b29b      	uxth	r3, r3
 8000564:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e003      	b.n	8000574 <lcd_reset+0x48>
 800056c:	bf00      	nop
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	3301      	adds	r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f241 2247 	movw	r2, #4679	; 0x1247
 800057a:	4293      	cmp	r3, r2
 800057c:	d9f6      	bls.n	800056c <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 800057e:	4b21      	ldr	r3, [pc, #132]	; (8000604 <lcd_reset+0xd8>)
 8000580:	8a9b      	ldrh	r3, [r3, #20]
 8000582:	b29b      	uxth	r3, r3
 8000584:	4a1f      	ldr	r2, [pc, #124]	; (8000604 <lcd_reset+0xd8>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	b29b      	uxth	r3, r3
 800058c:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	e003      	b.n	800059c <lcd_reset+0x70>
 8000594:	bf00      	nop
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	4a1a      	ldr	r2, [pc, #104]	; (8000608 <lcd_reset+0xdc>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d9f7      	bls.n	8000594 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80005a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a8:	8a9b      	ldrh	r3, [r3, #20]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 80005b8:	20ae      	movs	r0, #174	; 0xae
 80005ba:	f7ff fec1 	bl	8000340 <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 80005be:	20a2      	movs	r0, #162	; 0xa2
 80005c0:	f7ff febe 	bl	8000340 <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 80005c4:	20a0      	movs	r0, #160	; 0xa0
 80005c6:	f7ff febb 	bl	8000340 <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 80005ca:	20c8      	movs	r0, #200	; 0xc8
 80005cc:	f7ff feb8 	bl	8000340 <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 80005d0:	2022      	movs	r0, #34	; 0x22
 80005d2:	f7ff feb5 	bl	8000340 <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 80005d6:	202f      	movs	r0, #47	; 0x2f
 80005d8:	f7ff feb2 	bl	8000340 <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 80005dc:	2040      	movs	r0, #64	; 0x40
 80005de:	f7ff feaf 	bl	8000340 <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 80005e2:	20af      	movs	r0, #175	; 0xaf
 80005e4:	f7ff feac 	bl	8000340 <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 80005e8:	2081      	movs	r0, #129	; 0x81
 80005ea:	f7ff fea9 	bl	8000340 <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 80005ee:	2017      	movs	r0, #23
 80005f0:	f7ff fea6 	bl	8000340 <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 80005f4:	20a6      	movs	r0, #166	; 0xa6
 80005f6:	f7ff fea3 	bl	8000340 <lcd_transmit_byte>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	48000400 	.word	0x48000400
 8000608:	0005f36f 	.word	0x0005f36f

0800060c <lcd_init>:

void lcd_init() {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 8000610:	4b9d      	ldr	r3, [pc, #628]	; (8000888 <lcd_init+0x27c>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	4a9c      	ldr	r2, [pc, #624]	; (8000888 <lcd_init+0x27c>)
 8000616:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 800061a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 800061c:	4b9a      	ldr	r3, [pc, #616]	; (8000888 <lcd_init+0x27c>)
 800061e:	69db      	ldr	r3, [r3, #28]
 8000620:	4a99      	ldr	r2, [pc, #612]	; (8000888 <lcd_init+0x27c>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8000628:	4b98      	ldr	r3, [pc, #608]	; (800088c <lcd_init+0x280>)
 800062a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062c:	4a97      	ldr	r2, [pc, #604]	; (800088c <lcd_init+0x280>)
 800062e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000632:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8000634:	4b95      	ldr	r3, [pc, #596]	; (800088c <lcd_init+0x280>)
 8000636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000638:	4a94      	ldr	r2, [pc, #592]	; (800088c <lcd_init+0x280>)
 800063a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800063e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 8000640:	4b92      	ldr	r3, [pc, #584]	; (800088c <lcd_init+0x280>)
 8000642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000644:	4a91      	ldr	r2, [pc, #580]	; (800088c <lcd_init+0x280>)
 8000646:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800064a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 800064c:	4b8f      	ldr	r3, [pc, #572]	; (800088c <lcd_init+0x280>)
 800064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000650:	4a8e      	ldr	r2, [pc, #568]	; (800088c <lcd_init+0x280>)
 8000652:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000656:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8000658:	4b8c      	ldr	r3, [pc, #560]	; (800088c <lcd_init+0x280>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	4a8b      	ldr	r2, [pc, #556]	; (800088c <lcd_init+0x280>)
 800065e:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000662:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000664:	4b89      	ldr	r3, [pc, #548]	; (800088c <lcd_init+0x280>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	4a88      	ldr	r2, [pc, #544]	; (800088c <lcd_init+0x280>)
 800066a:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 800066e:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 8000670:	4b86      	ldr	r3, [pc, #536]	; (800088c <lcd_init+0x280>)
 8000672:	889b      	ldrh	r3, [r3, #4]
 8000674:	b29a      	uxth	r2, r3
 8000676:	4985      	ldr	r1, [pc, #532]	; (800088c <lcd_init+0x280>)
 8000678:	f645 73ff 	movw	r3, #24575	; 0x5fff
 800067c:	4013      	ands	r3, r2
 800067e:	b29b      	uxth	r3, r3
 8000680:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000682:	4a82      	ldr	r2, [pc, #520]	; (800088c <lcd_init+0x280>)
 8000684:	4b81      	ldr	r3, [pc, #516]	; (800088c <lcd_init+0x280>)
 8000686:	8892      	ldrh	r2, [r2, #4]
 8000688:	b292      	uxth	r2, r2
 800068a:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 800068c:	4b7f      	ldr	r3, [pc, #508]	; (800088c <lcd_init+0x280>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a7e      	ldr	r2, [pc, #504]	; (800088c <lcd_init+0x280>)
 8000692:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000696:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000698:	4b7c      	ldr	r3, [pc, #496]	; (800088c <lcd_init+0x280>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a7b      	ldr	r2, [pc, #492]	; (800088c <lcd_init+0x280>)
 800069e:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80006a2:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 80006a4:	4b79      	ldr	r3, [pc, #484]	; (800088c <lcd_init+0x280>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	4a78      	ldr	r2, [pc, #480]	; (800088c <lcd_init+0x280>)
 80006aa:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 80006ae:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80006b0:	4b76      	ldr	r3, [pc, #472]	; (800088c <lcd_init+0x280>)
 80006b2:	4a76      	ldr	r2, [pc, #472]	; (800088c <lcd_init+0x280>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 80006b8:	4b74      	ldr	r3, [pc, #464]	; (800088c <lcd_init+0x280>)
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	4a73      	ldr	r2, [pc, #460]	; (800088c <lcd_init+0x280>)
 80006be:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80006c2:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80006c4:	4b71      	ldr	r3, [pc, #452]	; (800088c <lcd_init+0x280>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	4a70      	ldr	r2, [pc, #448]	; (800088c <lcd_init+0x280>)
 80006ca:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 80006ce:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 80006d0:	4b6e      	ldr	r3, [pc, #440]	; (800088c <lcd_init+0x280>)
 80006d2:	889b      	ldrh	r3, [r3, #4]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	4a6d      	ldr	r2, [pc, #436]	; (800088c <lcd_init+0x280>)
 80006d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80006e4:	4a69      	ldr	r2, [pc, #420]	; (800088c <lcd_init+0x280>)
 80006e6:	4b69      	ldr	r3, [pc, #420]	; (800088c <lcd_init+0x280>)
 80006e8:	8892      	ldrh	r2, [r2, #4]
 80006ea:	b292      	uxth	r2, r2
 80006ec:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 80006ee:	4b67      	ldr	r3, [pc, #412]	; (800088c <lcd_init+0x280>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a66      	ldr	r2, [pc, #408]	; (800088c <lcd_init+0x280>)
 80006f4:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80006f8:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80006fa:	4b64      	ldr	r3, [pc, #400]	; (800088c <lcd_init+0x280>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a63      	ldr	r2, [pc, #396]	; (800088c <lcd_init+0x280>)
 8000700:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 8000704:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 8000706:	4b61      	ldr	r3, [pc, #388]	; (800088c <lcd_init+0x280>)
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	4a60      	ldr	r2, [pc, #384]	; (800088c <lcd_init+0x280>)
 800070c:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8000710:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000712:	4b5e      	ldr	r3, [pc, #376]	; (800088c <lcd_init+0x280>)
 8000714:	4a5d      	ldr	r2, [pc, #372]	; (800088c <lcd_init+0x280>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 800071a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000724:	0c9b      	lsrs	r3, r3, #18
 8000726:	049b      	lsls	r3, r3, #18
 8000728:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 800072a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000738:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 800073a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800073e:	889b      	ldrh	r3, [r3, #4]
 8000740:	b29b      	uxth	r3, r3
 8000742:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000746:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800074a:	f023 0301 	bic.w	r3, r3, #1
 800074e:	b29b      	uxth	r3, r3
 8000750:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000752:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000756:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800075a:	8892      	ldrh	r2, [r2, #4]
 800075c:	b292      	uxth	r2, r2
 800075e:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 8000760:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800076a:	0c9b      	lsrs	r3, r3, #18
 800076c:	049b      	lsls	r3, r3, #18
 800076e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000770:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800077a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800077e:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 8000780:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800078a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800078e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 8000790:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800079a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800079e:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 80007a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007aa:	0c9b      	lsrs	r3, r3, #18
 80007ac:	049b      	lsls	r3, r3, #18
 80007ae:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80007b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007b4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 80007bc:	4b33      	ldr	r3, [pc, #204]	; (800088c <lcd_init+0x280>)
 80007be:	8a9b      	ldrh	r3, [r3, #20]
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	4a32      	ldr	r2, [pc, #200]	; (800088c <lcd_init+0x280>)
 80007c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 80007cc:	4b30      	ldr	r3, [pc, #192]	; (8000890 <lcd_init+0x284>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	4a2f      	ldr	r2, [pc, #188]	; (8000890 <lcd_init+0x284>)
 80007d4:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80007d8:	b29b      	uxth	r3, r3
 80007da:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 80007dc:	4a2c      	ldr	r2, [pc, #176]	; (8000890 <lcd_init+0x284>)
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <lcd_init+0x284>)
 80007e0:	8812      	ldrh	r2, [r2, #0]
 80007e2:	b292      	uxth	r2, r2
 80007e4:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 80007e6:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <lcd_init+0x284>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	4a28      	ldr	r2, [pc, #160]	; (8000890 <lcd_init+0x284>)
 80007ee:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <lcd_init+0x284>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	4a24      	ldr	r2, [pc, #144]	; (8000890 <lcd_init+0x284>)
 80007fe:	f043 0302 	orr.w	r3, r3, #2
 8000802:	b29b      	uxth	r3, r3
 8000804:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <lcd_init+0x284>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	b29b      	uxth	r3, r3
 800080c:	4a20      	ldr	r2, [pc, #128]	; (8000890 <lcd_init+0x284>)
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	b29b      	uxth	r3, r3
 8000814:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <lcd_init+0x284>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	b29b      	uxth	r3, r3
 800081c:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <lcd_init+0x284>)
 800081e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000822:	b29b      	uxth	r3, r3
 8000824:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <lcd_init+0x284>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	b29b      	uxth	r3, r3
 800082c:	4a18      	ldr	r2, [pc, #96]	; (8000890 <lcd_init+0x284>)
 800082e:	f043 0308 	orr.w	r3, r3, #8
 8000832:	b29b      	uxth	r3, r3
 8000834:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <lcd_init+0x284>)
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <lcd_init+0x284>)
 800083a:	8812      	ldrh	r2, [r2, #0]
 800083c:	b292      	uxth	r2, r2
 800083e:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <lcd_init+0x284>)
 8000842:	889b      	ldrh	r3, [r3, #4]
 8000844:	b29b      	uxth	r3, r3
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <lcd_init+0x284>)
 8000848:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800084c:	b29b      	uxth	r3, r3
 800084e:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <lcd_init+0x284>)
 8000852:	889b      	ldrh	r3, [r3, #4]
 8000854:	b29b      	uxth	r3, r3
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <lcd_init+0x284>)
 8000858:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800085c:	b29b      	uxth	r3, r3
 800085e:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <lcd_init+0x284>)
 8000862:	8b9b      	ldrh	r3, [r3, #28]
 8000864:	b29b      	uxth	r3, r3
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <lcd_init+0x284>)
 8000868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800086c:	b29b      	uxth	r3, r3
 800086e:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <lcd_init+0x284>)
 8000872:	2207      	movs	r2, #7
 8000874:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <lcd_init+0x284>)
 8000878:	889b      	ldrh	r3, [r3, #4]
 800087a:	b29b      	uxth	r3, r3
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <lcd_init+0x284>)
 800087e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000882:	b29b      	uxth	r3, r3
 8000884:	e006      	b.n	8000894 <lcd_init+0x288>
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000
 800088c:	48000400 	.word	0x48000400
 8000890:	40003800 	.word	0x40003800
 8000894:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <lcd_init+0x2b4>)
 8000898:	889b      	ldrh	r3, [r3, #4]
 800089a:	b29b      	uxth	r3, r3
 800089c:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <lcd_init+0x2b4>)
 800089e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <lcd_init+0x2b4>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <lcd_init+0x2b4>)
 80008ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 80008b6:	f7ff fe39 	bl	800052c <lcd_reset>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40003800 	.word	0x40003800

080008c4 <TIM2_IRQHandler>:


#include "interrupts.h"


void TIM2_IRQHandler(void) {
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	//Do whatever you want here, but make sure it doesn’t take too much time!
	TIM2->SR &= ~0x0001; // Clear interrupt bit
 80008c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d2:	f023 0301 	bic.w	r3, r3, #1
 80008d6:	6113      	str	r3, [r2, #16]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <lcd_clear>:
 */

#include "lcd.h"


void lcd_clear() {
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b090      	sub	sp, #64	; 0x40
 80008e6:	af00      	add	r7, sp, #0
	uint8_t buffer[64];
	memset(buffer,0x1,512);
 80008e8:	463b      	mov	r3, r7
 80008ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ee:	2101      	movs	r1, #1
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 f8f1 	bl	8000ad8 <memset>
	lcd_push_buffer(&buffer);
 80008f6:	463b      	mov	r3, r7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fd53 	bl	80003a4 <lcd_push_buffer>
}
 80008fe:	bf00      	nop
 8000900:	3740      	adds	r7, #64	; 0x40
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <main>:
#include "gpio.h"
#include "led.h"
#include "lcd.h"

int main(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
	lcd_init();
 800090a:	f7ff fe7f 	bl	800060c <lcd_init>
	lcd_clear();
 800090e:	f7ff ffe8 	bl	80008e2 <lcd_clear>
	//lcd_write_string();

	while(1){}
 8000912:	e7fe      	b.n	8000912 <main+0xc>

08000914 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <SystemInit+0x84>)
 800091a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091e:	4a1e      	ldr	r2, [pc, #120]	; (8000998 <SystemInit+0x84>)
 8000920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <SystemInit+0x88>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <SystemInit+0x88>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <SystemInit+0x88>)
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	4918      	ldr	r1, [pc, #96]	; (800099c <SystemInit+0x88>)
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <SystemInit+0x8c>)
 800093c:	4013      	ands	r3, r2
 800093e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <SystemInit+0x88>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a15      	ldr	r2, [pc, #84]	; (800099c <SystemInit+0x88>)
 8000946:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800094a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800094e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <SystemInit+0x88>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a11      	ldr	r2, [pc, #68]	; (800099c <SystemInit+0x88>)
 8000956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800095a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <SystemInit+0x88>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <SystemInit+0x88>)
 8000962:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000966:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <SystemInit+0x88>)
 800096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <SystemInit+0x88>)
 800096e:	f023 030f 	bic.w	r3, r3, #15
 8000972:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <SystemInit+0x88>)
 8000976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000978:	4908      	ldr	r1, [pc, #32]	; (800099c <SystemInit+0x88>)
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <SystemInit+0x90>)
 800097c:	4013      	ands	r3, r2
 800097e:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <SystemInit+0x88>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000986:	f000 f80f 	bl	80009a8 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <SystemInit+0x84>)
 800098c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000990:	609a      	str	r2, [r3, #8]
#endif  
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00
 800099c:	40021000 	.word	0x40021000
 80009a0:	f87fc00c 	.word	0xf87fc00c
 80009a4:	ff00fccc 	.word	0xff00fccc

080009a8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80009ac:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <SetSysClock+0x8c>)
 80009ae:	2212      	movs	r2, #18
 80009b0:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <SetSysClock+0x90>)
 80009b4:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <SetSysClock+0x90>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <SetSysClock+0x90>)
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <SetSysClock+0x90>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <SetSysClock+0x90>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <SetSysClock+0x90>)
 80009c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009cc:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <SetSysClock+0x90>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <SetSysClock+0x90>)
 80009d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80009d8:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <SetSysClock+0x90>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <SetSysClock+0x90>)
 80009e0:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80009e4:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <SetSysClock+0x90>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <SetSysClock+0x90>)
 80009ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009f0:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80009f2:	bf00      	nop
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <SetSysClock+0x90>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f9      	beq.n	80009f4 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <SetSysClock+0x90>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <SetSysClock+0x90>)
 8000a06:	f023 0303 	bic.w	r3, r3, #3
 8000a0a:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <SetSysClock+0x90>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <SetSysClock+0x90>)
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000a18:	bf00      	nop
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <SetSysClock+0x90>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f003 030c 	and.w	r3, r3, #12
 8000a22:	2b08      	cmp	r3, #8
 8000a24:	d1f9      	bne.n	8000a1a <SetSysClock+0x72>
  {
  }
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40022000 	.word	0x40022000
 8000a38:	40021000 	.word	0x40021000

08000a3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a42:	490e      	ldr	r1, [pc, #56]	; (8000a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <LoopForever+0xe>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a58:	4c0b      	ldr	r4, [pc, #44]	; (8000a88 <LoopForever+0x16>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a66:	f7ff ff55 	bl	8000914 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a6a:	f000 f811 	bl	8000a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6e:	f7ff ff4a 	bl	8000906 <main>

08000a72 <LoopForever>:

LoopForever:
    b LoopForever
 8000a72:	e7fe      	b.n	8000a72 <LoopForever>
  ldr   r0, =_estack
 8000a74:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a80:	08000b08 	.word	0x08000b08
  ldr r2, =_sbss
 8000a84:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a88:	20000120 	.word	0x20000120

08000a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_2_IRQHandler>
	...

08000a90 <__libc_init_array>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	4d0d      	ldr	r5, [pc, #52]	; (8000ac8 <__libc_init_array+0x38>)
 8000a94:	4c0d      	ldr	r4, [pc, #52]	; (8000acc <__libc_init_array+0x3c>)
 8000a96:	1b64      	subs	r4, r4, r5
 8000a98:	10a4      	asrs	r4, r4, #2
 8000a9a:	2600      	movs	r6, #0
 8000a9c:	42a6      	cmp	r6, r4
 8000a9e:	d109      	bne.n	8000ab4 <__libc_init_array+0x24>
 8000aa0:	4d0b      	ldr	r5, [pc, #44]	; (8000ad0 <__libc_init_array+0x40>)
 8000aa2:	4c0c      	ldr	r4, [pc, #48]	; (8000ad4 <__libc_init_array+0x44>)
 8000aa4:	f000 f820 	bl	8000ae8 <_init>
 8000aa8:	1b64      	subs	r4, r4, r5
 8000aaa:	10a4      	asrs	r4, r4, #2
 8000aac:	2600      	movs	r6, #0
 8000aae:	42a6      	cmp	r6, r4
 8000ab0:	d105      	bne.n	8000abe <__libc_init_array+0x2e>
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab8:	4798      	blx	r3
 8000aba:	3601      	adds	r6, #1
 8000abc:	e7ee      	b.n	8000a9c <__libc_init_array+0xc>
 8000abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac2:	4798      	blx	r3
 8000ac4:	3601      	adds	r6, #1
 8000ac6:	e7f2      	b.n	8000aae <__libc_init_array+0x1e>
 8000ac8:	08000b00 	.word	0x08000b00
 8000acc:	08000b00 	.word	0x08000b00
 8000ad0:	08000b00 	.word	0x08000b00
 8000ad4:	08000b04 	.word	0x08000b04

08000ad8 <memset>:
 8000ad8:	4402      	add	r2, r0
 8000ada:	4603      	mov	r3, r0
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d100      	bne.n	8000ae2 <memset+0xa>
 8000ae0:	4770      	bx	lr
 8000ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ae6:	e7f9      	b.n	8000adc <memset+0x4>

08000ae8 <_init>:
 8000ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aea:	bf00      	nop
 8000aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aee:	bc08      	pop	{r3}
 8000af0:	469e      	mov	lr, r3
 8000af2:	4770      	bx	lr

08000af4 <_fini>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	bf00      	nop
 8000af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afa:	bc08      	pop	{r3}
 8000afc:	469e      	mov	lr, r3
 8000afe:	4770      	bx	lr
